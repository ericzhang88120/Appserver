// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lily.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lily.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lily {

namespace {

const ::google::protobuf::Descriptor* CSGetCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGetCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGetCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGetCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCRegister_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_lily_2eproto() {
  protobuf_AddDesc_lily_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lily.proto");
  GOOGLE_CHECK(file != NULL);
  CSGetCode_descriptor_ = file->message_type(0);
  static const int CSGetCode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetCode, phonenum_),
  };
  CSGetCode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSGetCode_descriptor_,
      CSGetCode::default_instance_,
      CSGetCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetCode, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSGetCode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGetCode, _internal_metadata_),
      -1);
  SCGetCode_descriptor_ = file->message_type(1);
  static const int SCGetCode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGetCode, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGetCode, msg_),
  };
  SCGetCode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SCGetCode_descriptor_,
      SCGetCode::default_instance_,
      SCGetCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGetCode, _has_bits_[0]),
      -1,
      -1,
      sizeof(SCGetCode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGetCode, _internal_metadata_),
      -1);
  CSRegister_descriptor_ = file->message_type(2);
  static const int CSRegister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegister, phonenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegister, code_),
  };
  CSRegister_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSRegister_descriptor_,
      CSRegister::default_instance_,
      CSRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegister, _has_bits_[0]),
      -1,
      -1,
      sizeof(CSRegister),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegister, _internal_metadata_),
      -1);
  SCRegister_descriptor_ = file->message_type(3);
  static const int SCRegister_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRegister, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRegister, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRegister, token_),
  };
  SCRegister_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SCRegister_descriptor_,
      SCRegister::default_instance_,
      SCRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRegister, _has_bits_[0]),
      -1,
      -1,
      sizeof(SCRegister),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRegister, _internal_metadata_),
      -1);
  Status_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lily_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSGetCode_descriptor_, &CSGetCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SCGetCode_descriptor_, &SCGetCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSRegister_descriptor_, &CSRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SCRegister_descriptor_, &SCRegister::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lily_2eproto() {
  delete CSGetCode::default_instance_;
  delete CSGetCode_reflection_;
  delete SCGetCode::default_instance_;
  delete SCGetCode_reflection_;
  delete CSRegister::default_instance_;
  delete CSRegister_reflection_;
  delete SCRegister::default_instance_;
  delete SCRegister_reflection_;
}

void protobuf_AddDesc_lily_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nlily.proto\022\004lily\"\035\n\tCSGetCode\022\020\n\010phone"
    "num\030\001 \002(\005\"3\n\tSCGetCode\022\031\n\003ret\030\001 \002(\0162\014.li"
    "ly.Status\022\013\n\003msg\030\002 \001(\t\",\n\nCSRegister\022\020\n\010"
    "phonenum\030\001 \002(\005\022\014\n\004code\030\002 \002(\005\"F\n\nSCRegist"
    "er\022\034\n\006status\030\001 \002(\0162\014.lily.Status\022\013\n\003msg\030"
    "\002 \001(\t\022\r\n\005token\030\003 \001(\t*\037\n\006Status\022\013\n\007SUCCES"
    "S\020\000\022\010\n\004FAIL\020\001", 253);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lily.proto", &protobuf_RegisterTypes);
  CSGetCode::default_instance_ = new CSGetCode();
  SCGetCode::default_instance_ = new SCGetCode();
  CSRegister::default_instance_ = new CSRegister();
  SCRegister::default_instance_ = new SCRegister();
  CSGetCode::default_instance_->InitAsDefaultInstance();
  SCGetCode::default_instance_->InitAsDefaultInstance();
  CSRegister::default_instance_->InitAsDefaultInstance();
  SCRegister::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lily_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lily_2eproto {
  StaticDescriptorInitializer_lily_2eproto() {
    protobuf_AddDesc_lily_2eproto();
  }
} static_descriptor_initializer_lily_2eproto_;
const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int CSGetCode::kPhonenumFieldNumber;
#endif  // !_MSC_VER

CSGetCode::CSGetCode()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lily.CSGetCode)
}

void CSGetCode::InitAsDefaultInstance() {
}

CSGetCode::CSGetCode(const CSGetCode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lily.CSGetCode)
}

void CSGetCode::SharedCtor() {
  _cached_size_ = 0;
  phonenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetCode::~CSGetCode() {
  // @@protoc_insertion_point(destructor:lily.CSGetCode)
  SharedDtor();
}

void CSGetCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGetCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGetCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGetCode_descriptor_;
}

const CSGetCode& CSGetCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lily_2eproto();
  return *default_instance_;
}

CSGetCode* CSGetCode::default_instance_ = NULL;

CSGetCode* CSGetCode::New(::google::protobuf::Arena* arena) const {
  CSGetCode* n = new CSGetCode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSGetCode::Clear() {
  phonenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSGetCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lily.CSGetCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 phonenum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phonenum_)));
          set_has_phonenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lily.CSGetCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lily.CSGetCode)
  return false;
#undef DO_
}

void CSGetCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lily.CSGetCode)
  // required int32 phonenum = 1;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->phonenum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lily.CSGetCode)
}

::google::protobuf::uint8* CSGetCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lily.CSGetCode)
  // required int32 phonenum = 1;
  if (has_phonenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->phonenum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lily.CSGetCode)
  return target;
}

int CSGetCode::ByteSize() const {
  int total_size = 0;

  // required int32 phonenum = 1;
  if (has_phonenum()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->phonenum());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetCode::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSGetCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGetCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGetCode::MergeFrom(const CSGetCode& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSGetCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGetCode::CopyFrom(const CSGetCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGetCode::Swap(CSGetCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSGetCode::InternalSwap(CSGetCode* other) {
  std::swap(phonenum_, other->phonenum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSGetCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGetCode_descriptor_;
  metadata.reflection = CSGetCode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSGetCode

// required int32 phonenum = 1;
 bool CSGetCode::has_phonenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void CSGetCode::set_has_phonenum() {
  _has_bits_[0] |= 0x00000001u;
}
 void CSGetCode::clear_has_phonenum() {
  _has_bits_[0] &= ~0x00000001u;
}
 void CSGetCode::clear_phonenum() {
  phonenum_ = 0;
  clear_has_phonenum();
}
 ::google::protobuf::int32 CSGetCode::phonenum() const {
  // @@protoc_insertion_point(field_get:lily.CSGetCode.phonenum)
  return phonenum_;
}
 void CSGetCode::set_phonenum(::google::protobuf::int32 value) {
  set_has_phonenum();
  phonenum_ = value;
  // @@protoc_insertion_point(field_set:lily.CSGetCode.phonenum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SCGetCode::kRetFieldNumber;
const int SCGetCode::kMsgFieldNumber;
#endif  // !_MSC_VER

SCGetCode::SCGetCode()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lily.SCGetCode)
}

void SCGetCode::InitAsDefaultInstance() {
}

SCGetCode::SCGetCode(const SCGetCode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lily.SCGetCode)
}

void SCGetCode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ret_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGetCode::~SCGetCode() {
  // @@protoc_insertion_point(destructor:lily.SCGetCode)
  SharedDtor();
}

void SCGetCode::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SCGetCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGetCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGetCode_descriptor_;
}

const SCGetCode& SCGetCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lily_2eproto();
  return *default_instance_;
}

SCGetCode* SCGetCode::default_instance_ = NULL;

SCGetCode* SCGetCode::New(::google::protobuf::Arena* arena) const {
  SCGetCode* n = new SCGetCode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SCGetCode::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    ret_ = 0;
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SCGetCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lily.SCGetCode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lily.Status ret = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lily::Status_IsValid(value)) {
            set_ret(static_cast< ::lily::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lily.SCGetCode.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lily.SCGetCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lily.SCGetCode)
  return false;
#undef DO_
}

void SCGetCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lily.SCGetCode)
  // required .lily.Status ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lily.SCGetCode.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lily.SCGetCode)
}

::google::protobuf::uint8* SCGetCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lily.SCGetCode)
  // required .lily.Status ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lily.SCGetCode.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lily.SCGetCode)
  return target;
}

int SCGetCode::ByteSize() const {
  int total_size = 0;

  // required .lily.Status ret = 1;
  if (has_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
  }
  // optional string msg = 2;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGetCode::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SCGetCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGetCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGetCode::MergeFrom(const SCGetCode& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SCGetCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGetCode::CopyFrom(const SCGetCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGetCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCGetCode::Swap(SCGetCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SCGetCode::InternalSwap(SCGetCode* other) {
  std::swap(ret_, other->ret_);
  msg_.Swap(&other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SCGetCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGetCode_descriptor_;
  metadata.reflection = SCGetCode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SCGetCode

// required .lily.Status ret = 1;
 bool SCGetCode::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void SCGetCode::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
 void SCGetCode::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
 void SCGetCode::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
 ::lily::Status SCGetCode::ret() const {
  // @@protoc_insertion_point(field_get:lily.SCGetCode.ret)
  return static_cast< ::lily::Status >(ret_);
}
 void SCGetCode::set_ret(::lily::Status value) {
  assert(::lily::Status_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:lily.SCGetCode.ret)
}

// optional string msg = 2;
 bool SCGetCode::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void SCGetCode::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
 void SCGetCode::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
 void SCGetCode::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& SCGetCode::msg() const {
  // @@protoc_insertion_point(field_get:lily.SCGetCode.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SCGetCode::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lily.SCGetCode.msg)
}
 void SCGetCode::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lily.SCGetCode.msg)
}
 void SCGetCode::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lily.SCGetCode.msg)
}
 ::std::string* SCGetCode::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:lily.SCGetCode.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SCGetCode::release_msg() {
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SCGetCode::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:lily.SCGetCode.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CSRegister::kPhonenumFieldNumber;
const int CSRegister::kCodeFieldNumber;
#endif  // !_MSC_VER

CSRegister::CSRegister()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lily.CSRegister)
}

void CSRegister::InitAsDefaultInstance() {
}

CSRegister::CSRegister(const CSRegister& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lily.CSRegister)
}

void CSRegister::SharedCtor() {
  _cached_size_ = 0;
  phonenum_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegister::~CSRegister() {
  // @@protoc_insertion_point(destructor:lily.CSRegister)
  SharedDtor();
}

void CSRegister::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegister_descriptor_;
}

const CSRegister& CSRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lily_2eproto();
  return *default_instance_;
}

CSRegister* CSRegister::default_instance_ = NULL;

CSRegister* CSRegister::New(::google::protobuf::Arena* arena) const {
  CSRegister* n = new CSRegister;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSRegister::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSRegister*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(phonenum_, code_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CSRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lily.CSRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 phonenum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phonenum_)));
          set_has_phonenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // required int32 code = 2;
      case 2: {
        if (tag == 16) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lily.CSRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lily.CSRegister)
  return false;
#undef DO_
}

void CSRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lily.CSRegister)
  // required int32 phonenum = 1;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->phonenum(), output);
  }

  // required int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lily.CSRegister)
}

::google::protobuf::uint8* CSRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lily.CSRegister)
  // required int32 phonenum = 1;
  if (has_phonenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->phonenum(), target);
  }

  // required int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lily.CSRegister)
  return target;
}

int CSRegister::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_phonenum()) {
    // required int32 phonenum = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->phonenum());
  }

  if (has_code()) {
    // required int32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  return total_size;
}
int CSRegister::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 phonenum = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->phonenum());

    // required int32 code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegister::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CSRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegister::MergeFrom(const CSRegister& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CSRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegister::CopyFrom(const CSRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSRegister::Swap(CSRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSRegister::InternalSwap(CSRegister* other) {
  std::swap(phonenum_, other->phonenum_);
  std::swap(code_, other->code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegister_descriptor_;
  metadata.reflection = CSRegister_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSRegister

// required int32 phonenum = 1;
 bool CSRegister::has_phonenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void CSRegister::set_has_phonenum() {
  _has_bits_[0] |= 0x00000001u;
}
 void CSRegister::clear_has_phonenum() {
  _has_bits_[0] &= ~0x00000001u;
}
 void CSRegister::clear_phonenum() {
  phonenum_ = 0;
  clear_has_phonenum();
}
 ::google::protobuf::int32 CSRegister::phonenum() const {
  // @@protoc_insertion_point(field_get:lily.CSRegister.phonenum)
  return phonenum_;
}
 void CSRegister::set_phonenum(::google::protobuf::int32 value) {
  set_has_phonenum();
  phonenum_ = value;
  // @@protoc_insertion_point(field_set:lily.CSRegister.phonenum)
}

// required int32 code = 2;
 bool CSRegister::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void CSRegister::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
 void CSRegister::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
 void CSRegister::clear_code() {
  code_ = 0;
  clear_has_code();
}
 ::google::protobuf::int32 CSRegister::code() const {
  // @@protoc_insertion_point(field_get:lily.CSRegister.code)
  return code_;
}
 void CSRegister::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:lily.CSRegister.code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SCRegister::kStatusFieldNumber;
const int SCRegister::kMsgFieldNumber;
const int SCRegister::kTokenFieldNumber;
#endif  // !_MSC_VER

SCRegister::SCRegister()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lily.SCRegister)
}

void SCRegister::InitAsDefaultInstance() {
}

SCRegister::SCRegister(const SCRegister& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lily.SCRegister)
}

void SCRegister::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCRegister::~SCRegister() {
  // @@protoc_insertion_point(destructor:lily.SCRegister)
  SharedDtor();
}

void SCRegister::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SCRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCRegister_descriptor_;
}

const SCRegister& SCRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lily_2eproto();
  return *default_instance_;
}

SCRegister* SCRegister::default_instance_ = NULL;

SCRegister* SCRegister::New(::google::protobuf::Arena* arena) const {
  SCRegister* n = new SCRegister;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SCRegister::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    status_ = 0;
    if (has_msg()) {
      msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SCRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lily.SCRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lily.Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lily::Status_IsValid(value)) {
            set_status(static_cast< ::lily::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lily.SCRegister.msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lily.SCRegister.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lily.SCRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lily.SCRegister)
  return false;
#undef DO_
}

void SCRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lily.SCRegister)
  // required .lily.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lily.SCRegister.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lily.SCRegister.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lily.SCRegister)
}

::google::protobuf::uint8* SCRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lily.SCRegister)
  // required .lily.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lily.SCRegister.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lily.SCRegister.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lily.SCRegister)
  return target;
}

int SCRegister::ByteSize() const {
  int total_size = 0;

  // required .lily.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }
  if (_has_bits_[1 / 32] & 6) {
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCRegister::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SCRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCRegister::MergeFrom(const SCRegister& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_msg()) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SCRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRegister::CopyFrom(const SCRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCRegister::Swap(SCRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SCRegister::InternalSwap(SCRegister* other) {
  std::swap(status_, other->status_);
  msg_.Swap(&other->msg_);
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SCRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCRegister_descriptor_;
  metadata.reflection = SCRegister_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SCRegister

// required .lily.Status status = 1;
 bool SCRegister::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void SCRegister::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
 void SCRegister::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
 void SCRegister::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::lily::Status SCRegister::status() const {
  // @@protoc_insertion_point(field_get:lily.SCRegister.status)
  return static_cast< ::lily::Status >(status_);
}
 void SCRegister::set_status(::lily::Status value) {
  assert(::lily::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:lily.SCRegister.status)
}

// optional string msg = 2;
 bool SCRegister::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void SCRegister::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
 void SCRegister::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
 void SCRegister::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
 const ::std::string& SCRegister::msg() const {
  // @@protoc_insertion_point(field_get:lily.SCRegister.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SCRegister::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lily.SCRegister.msg)
}
 void SCRegister::set_msg(const char* value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lily.SCRegister.msg)
}
 void SCRegister::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lily.SCRegister.msg)
}
 ::std::string* SCRegister::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:lily.SCRegister.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SCRegister::release_msg() {
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SCRegister::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:lily.SCRegister.msg)
}

// optional string token = 3;
 bool SCRegister::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void SCRegister::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
 void SCRegister::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
 void SCRegister::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& SCRegister::token() const {
  // @@protoc_insertion_point(field_get:lily.SCRegister.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SCRegister::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:lily.SCRegister.token)
}
 void SCRegister::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lily.SCRegister.token)
}
 void SCRegister::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lily.SCRegister.token)
}
 ::std::string* SCRegister::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:lily.SCRegister.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SCRegister::release_token() {
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SCRegister::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:lily.SCRegister.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace lily

// @@protoc_insertion_point(global_scope)
