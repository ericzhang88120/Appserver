// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lily.pb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lilymsg {

namespace {

const ::google::protobuf::Descriptor* MsgHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBody_reflection_ = NULL;
const ::google::protobuf::Descriptor* lilymsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lilymsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_lily_2epb() {
  protobuf_AddDesc_lily_2epb();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lily.pb");
  GOOGLE_CHECK(file != NULL);
  MsgHeader_descriptor_ = file->message_type(0);
  static const int MsgHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, type_),
  };
  MsgHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHeader_descriptor_,
      MsgHeader::default_instance_,
      MsgHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHeader));
  AuthCode_descriptor_ = file->message_type(1);
  static const int AuthCode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthCode, phonenum_),
  };
  AuthCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthCode_descriptor_,
      AuthCode::default_instance_,
      AuthCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthCode));
  CSRegister_descriptor_ = file->message_type(2);
  static const int CSRegister_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegister, phonenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegister, code_),
  };
  CSRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegister_descriptor_,
      CSRegister::default_instance_,
      CSRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegister));
  SCRegister_descriptor_ = file->message_type(3);
  static const int SCRegister_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRegister, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRegister, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRegister, token_),
  };
  SCRegister_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCRegister_descriptor_,
      SCRegister::default_instance_,
      SCRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRegister, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCRegister, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCRegister));
  MsgBody_descriptor_ = file->message_type(4);
  static const int MsgBody_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, authcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, csregister_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, scregister_),
  };
  MsgBody_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBody_descriptor_,
      MsgBody::default_instance_,
      MsgBody_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBody));
  lilymsg_descriptor_ = file->message_type(5);
  static const int lilymsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lilymsg, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lilymsg, body_),
  };
  lilymsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lilymsg_descriptor_,
      lilymsg::default_instance_,
      lilymsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lilymsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lilymsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lilymsg));
  Status_descriptor_ = file->enum_type(0);
  MsgType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lily_2epb);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHeader_descriptor_, &MsgHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthCode_descriptor_, &AuthCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegister_descriptor_, &CSRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCRegister_descriptor_, &SCRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBody_descriptor_, &MsgBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lilymsg_descriptor_, &lilymsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lily_2epb() {
  delete MsgHeader::default_instance_;
  delete MsgHeader_reflection_;
  delete AuthCode::default_instance_;
  delete AuthCode_reflection_;
  delete CSRegister::default_instance_;
  delete CSRegister_reflection_;
  delete SCRegister::default_instance_;
  delete SCRegister_reflection_;
  delete MsgBody::default_instance_;
  delete MsgBody_reflection_;
  delete lilymsg::default_instance_;
  delete lilymsg_reflection_;
}

void protobuf_AddDesc_lily_2epb() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\007lily.pb\022\007lilymsg\"+\n\tMsgHeader\022\036\n\004type\030"
    "\001 \002(\0162\020.lilymsg.MsgType\"\034\n\010AuthCode\022\020\n\010p"
    "honenum\030\001 \002(\005\",\n\nCSRegister\022\020\n\010phonenum\030"
    "\001 \002(\005\022\014\n\004code\030\002 \002(\005\"I\n\nSCRegister\022\037\n\006sta"
    "tus\030\001 \002(\0162\017.lilymsg.Status\022\013\n\003msg\030\002 \001(\t\022"
    "\r\n\005token\030\003 \001(\t\"\200\001\n\007MsgBody\022#\n\010authcode\030\001"
    " \001(\0132\021.lilymsg.AuthCode\022\'\n\ncsregister\030\002 "
    "\001(\0132\023.lilymsg.CSRegister\022\'\n\nscregister\030\003"
    " \001(\0132\023.lilymsg.SCRegister\"M\n\007lilymsg\022\"\n\006"
    "header\030\001 \002(\0132\022.lilymsg.MsgHeader\022\036\n\004body"
    "\030\002 \002(\0132\020.lilymsg.MsgBody*\037\n\006Status\022\013\n\007SU"
    "CCESS\020\000\022\010\n\004FAIL\020\001*;\n\007MsgType\022\014\n\010AUTHCODE"
    "\020d\022\020\n\013CS_REGISTER\020\350\007\022\020\n\013SC_REGISTER\020\351\007", 518);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lily.pb", &protobuf_RegisterTypes);
  MsgHeader::default_instance_ = new MsgHeader();
  AuthCode::default_instance_ = new AuthCode();
  CSRegister::default_instance_ = new CSRegister();
  SCRegister::default_instance_ = new SCRegister();
  MsgBody::default_instance_ = new MsgBody();
  lilymsg::default_instance_ = new lilymsg();
  MsgHeader::default_instance_->InitAsDefaultInstance();
  AuthCode::default_instance_->InitAsDefaultInstance();
  CSRegister::default_instance_->InitAsDefaultInstance();
  SCRegister::default_instance_->InitAsDefaultInstance();
  MsgBody::default_instance_->InitAsDefaultInstance();
  lilymsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lily_2epb);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lily_2epb {
  StaticDescriptorInitializer_lily_2epb() {
    protobuf_AddDesc_lily_2epb();
  }
} static_descriptor_initializer_lily_2epb_;

const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 100:
    case 1000:
    case 1001:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHeader::kTypeFieldNumber;
#endif  // !_MSC_VER

MsgHeader::MsgHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgHeader::InitAsDefaultInstance() {
}

MsgHeader::MsgHeader(const MsgHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgHeader::SharedCtor() {
  _cached_size_ = 0;
  type_ = 100;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHeader::~MsgHeader() {
  SharedDtor();
}

void MsgHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHeader_descriptor_;
}

const MsgHeader& MsgHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lily_2epb();  return *default_instance_;
}

MsgHeader* MsgHeader::default_instance_ = NULL;

MsgHeader* MsgHeader::New() const {
  return new MsgHeader;
}

void MsgHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 100;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lilymsg.MsgType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lilymsg::MsgType_IsValid(value)) {
            set_type(static_cast< lilymsg::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lilymsg.MsgType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lilymsg.MsgType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lilymsg.MsgType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHeader::MergeFrom(const MsgHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHeader::CopyFrom(const MsgHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgHeader::Swap(MsgHeader* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHeader_descriptor_;
  metadata.reflection = MsgHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthCode::kPhonenumFieldNumber;
#endif  // !_MSC_VER

AuthCode::AuthCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthCode::InitAsDefaultInstance() {
}

AuthCode::AuthCode(const AuthCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthCode::SharedCtor() {
  _cached_size_ = 0;
  phonenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthCode::~AuthCode() {
  SharedDtor();
}

void AuthCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuthCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthCode_descriptor_;
}

const AuthCode& AuthCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lily_2epb();  return *default_instance_;
}

AuthCode* AuthCode::default_instance_ = NULL;

AuthCode* AuthCode::New() const {
  return new AuthCode;
}

void AuthCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 phonenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phonenum_)));
          set_has_phonenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 phonenum = 1;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->phonenum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 phonenum = 1;
  if (has_phonenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->phonenum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 phonenum = 1;
    if (has_phonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phonenum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthCode::MergeFrom(const AuthCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthCode::CopyFrom(const AuthCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AuthCode::Swap(AuthCode* other) {
  if (other != this) {
    std::swap(phonenum_, other->phonenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthCode_descriptor_;
  metadata.reflection = AuthCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegister::kPhonenumFieldNumber;
const int CSRegister::kCodeFieldNumber;
#endif  // !_MSC_VER

CSRegister::CSRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegister::InitAsDefaultInstance() {
}

CSRegister::CSRegister(const CSRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegister::SharedCtor() {
  _cached_size_ = 0;
  phonenum_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegister::~CSRegister() {
  SharedDtor();
}

void CSRegister::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegister_descriptor_;
}

const CSRegister& CSRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lily_2epb();  return *default_instance_;
}

CSRegister* CSRegister::default_instance_ = NULL;

CSRegister* CSRegister::New() const {
  return new CSRegister;
}

void CSRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phonenum_ = 0;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 phonenum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phonenum_)));
          set_has_phonenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }
      
      // required int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 phonenum = 1;
  if (has_phonenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->phonenum(), output);
  }
  
  // required int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 phonenum = 1;
  if (has_phonenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->phonenum(), target);
  }
  
  // required int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegister::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 phonenum = 1;
    if (has_phonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phonenum());
    }
    
    // required int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegister::MergeFrom(const CSRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phonenum()) {
      set_phonenum(from.phonenum());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegister::CopyFrom(const CSRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CSRegister::Swap(CSRegister* other) {
  if (other != this) {
    std::swap(phonenum_, other->phonenum_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegister_descriptor_;
  metadata.reflection = CSRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCRegister::kStatusFieldNumber;
const int SCRegister::kMsgFieldNumber;
const int SCRegister::kTokenFieldNumber;
#endif  // !_MSC_VER

SCRegister::SCRegister()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCRegister::InitAsDefaultInstance() {
}

SCRegister::SCRegister(const SCRegister& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCRegister::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCRegister::~SCRegister() {
  SharedDtor();
}

void SCRegister::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void SCRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCRegister_descriptor_;
}

const SCRegister& SCRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lily_2epb();  return *default_instance_;
}

SCRegister* SCRegister::default_instance_ = NULL;

SCRegister* SCRegister::New() const {
  return new SCRegister;
}

void SCRegister::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lilymsg.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lilymsg::Status_IsValid(value)) {
            set_status(static_cast< lilymsg::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }
      
      // optional string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lilymsg.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }
  
  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCRegister::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lilymsg.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }
  
  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }
  
  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCRegister::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lilymsg.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCRegister::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCRegister* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCRegister*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCRegister::MergeFrom(const SCRegister& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCRegister::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCRegister::CopyFrom(const SCRegister& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SCRegister::Swap(SCRegister* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(msg_, other->msg_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCRegister_descriptor_;
  metadata.reflection = SCRegister_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBody::kAuthcodeFieldNumber;
const int MsgBody::kCsregisterFieldNumber;
const int MsgBody::kScregisterFieldNumber;
#endif  // !_MSC_VER

MsgBody::MsgBody()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgBody::InitAsDefaultInstance() {
  authcode_ = const_cast< ::lilymsg::AuthCode*>(&::lilymsg::AuthCode::default_instance());
  csregister_ = const_cast< ::lilymsg::CSRegister*>(&::lilymsg::CSRegister::default_instance());
  scregister_ = const_cast< ::lilymsg::SCRegister*>(&::lilymsg::SCRegister::default_instance());
}

MsgBody::MsgBody(const MsgBody& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgBody::SharedCtor() {
  _cached_size_ = 0;
  authcode_ = NULL;
  csregister_ = NULL;
  scregister_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBody::~MsgBody() {
  SharedDtor();
}

void MsgBody::SharedDtor() {
  if (this != default_instance_) {
    delete authcode_;
    delete csregister_;
    delete scregister_;
  }
}

void MsgBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBody_descriptor_;
}

const MsgBody& MsgBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lily_2epb();  return *default_instance_;
}

MsgBody* MsgBody::default_instance_ = NULL;

MsgBody* MsgBody::New() const {
  return new MsgBody;
}

void MsgBody::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_authcode()) {
      if (authcode_ != NULL) authcode_->::lilymsg::AuthCode::Clear();
    }
    if (has_csregister()) {
      if (csregister_ != NULL) csregister_->::lilymsg::CSRegister::Clear();
    }
    if (has_scregister()) {
      if (scregister_ != NULL) scregister_->::lilymsg::SCRegister::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lilymsg.AuthCode authcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authcode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_csregister;
        break;
      }
      
      // optional .lilymsg.CSRegister csregister = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_csregister:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_csregister()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_scregister;
        break;
      }
      
      // optional .lilymsg.SCRegister scregister = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scregister:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scregister()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lilymsg.AuthCode authcode = 1;
  if (has_authcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->authcode(), output);
  }
  
  // optional .lilymsg.CSRegister csregister = 2;
  if (has_csregister()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->csregister(), output);
  }
  
  // optional .lilymsg.SCRegister scregister = 3;
  if (has_scregister()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->scregister(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgBody::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lilymsg.AuthCode authcode = 1;
  if (has_authcode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->authcode(), target);
  }
  
  // optional .lilymsg.CSRegister csregister = 2;
  if (has_csregister()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->csregister(), target);
  }
  
  // optional .lilymsg.SCRegister scregister = 3;
  if (has_scregister()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->scregister(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgBody::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lilymsg.AuthCode authcode = 1;
    if (has_authcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authcode());
    }
    
    // optional .lilymsg.CSRegister csregister = 2;
    if (has_csregister()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->csregister());
    }
    
    // optional .lilymsg.SCRegister scregister = 3;
    if (has_scregister()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scregister());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBody::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBody* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBody*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBody::MergeFrom(const MsgBody& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_authcode()) {
      mutable_authcode()->::lilymsg::AuthCode::MergeFrom(from.authcode());
    }
    if (from.has_csregister()) {
      mutable_csregister()->::lilymsg::CSRegister::MergeFrom(from.csregister());
    }
    if (from.has_scregister()) {
      mutable_scregister()->::lilymsg::SCRegister::MergeFrom(from.scregister());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBody::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBody::CopyFrom(const MsgBody& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBody::IsInitialized() const {
  
  if (has_authcode()) {
    if (!this->authcode().IsInitialized()) return false;
  }
  if (has_csregister()) {
    if (!this->csregister().IsInitialized()) return false;
  }
  if (has_scregister()) {
    if (!this->scregister().IsInitialized()) return false;
  }
  return true;
}

void MsgBody::Swap(MsgBody* other) {
  if (other != this) {
    std::swap(authcode_, other->authcode_);
    std::swap(csregister_, other->csregister_);
    std::swap(scregister_, other->scregister_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBody_descriptor_;
  metadata.reflection = MsgBody_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lilymsg::kHeaderFieldNumber;
const int lilymsg::kBodyFieldNumber;
#endif  // !_MSC_VER

lilymsg::lilymsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lilymsg::InitAsDefaultInstance() {
  header_ = const_cast< ::lilymsg::MsgHeader*>(&::lilymsg::MsgHeader::default_instance());
  body_ = const_cast< ::lilymsg::MsgBody*>(&::lilymsg::MsgBody::default_instance());
}

lilymsg::lilymsg(const lilymsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lilymsg::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  body_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lilymsg::~lilymsg() {
  SharedDtor();
}

void lilymsg::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete body_;
  }
}

void lilymsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lilymsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lilymsg_descriptor_;
}

const lilymsg& lilymsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lily_2epb();  return *default_instance_;
}

lilymsg* lilymsg::default_instance_ = NULL;

lilymsg* lilymsg::New() const {
  return new lilymsg;
}

void lilymsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lilymsg::MsgHeader::Clear();
    }
    if (has_body()) {
      if (body_ != NULL) body_->::lilymsg::MsgBody::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lilymsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lilymsg.MsgHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }
      
      // required .lilymsg.MsgBody body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lilymsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lilymsg.MsgHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // required .lilymsg.MsgBody body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lilymsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lilymsg.MsgHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // required .lilymsg.MsgBody body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lilymsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lilymsg.MsgHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // required .lilymsg.MsgBody body = 2;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lilymsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lilymsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lilymsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lilymsg::MergeFrom(const lilymsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lilymsg::MsgHeader::MergeFrom(from.header());
    }
    if (from.has_body()) {
      mutable_body()->::lilymsg::MsgBody::MergeFrom(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lilymsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lilymsg::CopyFrom(const lilymsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lilymsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_body()) {
    if (!this->body().IsInitialized()) return false;
  }
  return true;
}

void lilymsg::Swap(lilymsg* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lilymsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lilymsg_descriptor_;
  metadata.reflection = lilymsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lilymsg

// @@protoc_insertion_point(global_scope)
